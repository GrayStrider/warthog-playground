interface BaseGraphQLObject {
  id: String!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type Model implements BaseGraphQLObject {
  id: String!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

interface DeleteResponse {
  id: String!
}

type Mutation {
  createPhoto(data: PhotoCreateInput!): Photo!
  updatePhoto(data: PhotoUpdateInput!, where: PhotoWhereUniqueInput!): Photo!
  deletePhoto(where: PhotoWhereUniqueInput!): StandardDeleteResponse!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  deleteUser(where: UserWhereUniqueInput!): StandardDeleteResponse!
}

type Photo implements BaseGraphQLObject {
  id: String!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  filename: String
  userId: String!
  user: User
}

input PhotoCreateInput {
  filename: String!
  userId: String!
}

enum PhotoOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  filename_ASC
  filename_DESC
}

input PhotoUpdateInput {
  filename: String
}

input PhotoWhereInput {
  id_eq: String
  id_in: [String!]
  createdAt_eq: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdById_eq: String
  updatedAt_eq: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedById_eq: String
  deletedAt_all: Boolean
  deletedAt_eq: String
  deletedAt_lt: String
  deletedAt_lte: String
  deletedAt_gt: String
  deletedAt_gte: String
  deletedById_eq: String
  AND: [PhotoWhereInput!]
  OR: [PhotoWhereInput!]
  NOT: [PhotoWhereInput!]
  filename_eq: String
  filename_contains: String
  filename_startsWith: String
  filename_endsWith: String
}

input PhotoWhereUniqueInput {
  id: String
}

type Query {
  photos(offset: Int, limit: Int, where: PhotoWhereInput, orderBy: PhotoOrderByInput): [Photo!]!
  photo(where: PhotoWhereUniqueInput!): Photo!
  users(offset: Int, limit: Int, where: UserWhereInput, orderBy: UserOrderByInput): [User!]!
  user(where: UserWhereUniqueInput!): User!
}

type StandardDeleteResponse {
  id: String!
}

type User implements BaseGraphQLObject {
  id: String!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  firstName: String
  lastName: String
  email: String!
  photos: [Photo!]
  privateField: String
}

input UserCreateInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
}

input UserWhereInput {
  id_eq: String
  id_in: [String!]
  createdAt_eq: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdById_eq: String
  updatedAt_eq: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedById_eq: String
  deletedAt_all: Boolean
  deletedAt_eq: String
  deletedAt_lt: String
  deletedAt_lte: String
  deletedAt_gt: String
  deletedAt_gte: String
  deletedById_eq: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  firstName_eq: String
  firstName_contains: String
  firstName_startsWith: String
  firstName_endsWith: String
  lastName_eq: String
  lastName_contains: String
  lastName_startsWith: String
  lastName_endsWith: String
  email_eq: String
  email_in: [String!]
  email_contains: String
  email_startsWith: String
  email_endsWith: String
}

input UserWhereUniqueInput {
  id: String
  email: String
}
